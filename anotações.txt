||| API - Application Programming Interface |||
-Conjunto de rotinas e padr√µes estabelecidos e docunmentados por uma aplica√ß√£o para que outras aplica√ß√µes consigam utilizam
suas funcionalidades sem precisar conhecer da sua implementa√ß√£o.

||| SOAP - Simple Object Access Protocol |||
- √â uma protocolo baseado em XML, usado para trocar informa√ß√µes entre aplica√ß√µes no mesmo ou um diferentes sistemas 
operacionais

||| REST - Representation State Transfer Protocol |||
- √â um estilo arquitetural sem estado que consiste de um Conjunto coordenado de restri√ß√µes arquiteturais aplicadas
a componentes de dados dentro de um sistema de hipermidia distribuido.

Recurso: √â uma abstra√ß√£o sobre um tipo de informa√ß√£o que uma aplica√ß√£o gerencia que possui uma identifica√ß√£o √∫nica (URI).
Representa√ß√£o: √â um instant√¢neo do estado de um recurso em um ponto no tempo. Uma sequ√™ncia de de bytes associado com metadados.
Intera√ß√µes sem estado(stateless): A comunica√ß√£o entre o cliente e o servidor sempre cont√©m todas as informa√ß√µes.
Mensagem: As mensagens devem ser autodescrtivas. no HTTP usa-se os verbos GET, POST, PUT, DELETE.

                                                         HTTPs

**idempotente** - uma requisi√ß√£o idempotente √© aquela que pode ser feita uma ou v√°rias vezes e o resultado no servidor 
ser√° o mesmo
Idempot√™ncia = repetir a requisi√ß√£o n√£o muda o resultado al√©m da primeira execu√ß√£o.
N√£o idempotente = cada vez que voc√™ chama, o resultado √© diferente 

HTTP Get(read)
- Usado para recuperar informa√ß√µes
- N√£o altera o estado do recurso(m√©todo seguro)
HTTP Post(create)
- Usado para criar uma informa√ß√£o (criar um novo recurso)
- Alteram o estado do recurso (n√£o √© um m√©todo seguro)
- N√£o s√£o idempotentes (n√£o produz o mesmo resultado se repedida)


                                                        JSON vs XML
JSON - √à texto simples, legivel, hier√°rquico(valores dentro de valores), pode ser analisado pelo Javascript
ex.
{
  "id": 1,
  "nome": "Michel",
  "Idade": 27
}

XML  - Mais verboso, estrutura em elementos e atributos, schemas e valida√ß√µes complexas
ex.
<usuario id="1">
  <nome>Michel</nome>
  <idade>27</idade>
</usuario>


                                                        JSON - ASP .NET core
A classe HttpClient √© usada para enviar uma requisi√ß√£o HTTP e receber a resposta da solicita√ß√£o (namespace System.Net.Http)
Permite interagir com recursos em servidores remotos por meio dos principais m√©todos HTTP, como Get, Post, Put, Delete

--Principais M√©todos da classe HttpClient
DeleteAsync, GetAsync, GetByteArrayAsync, GetStreamAsync, GetStringAsync, PostAsync, PutAsync

                                                        
                                                        Modelo de maturidade de Richardson (RMM)
√â um modelo sugerido em 2008 por Leonard Richardson que classifica as APIs com base em sua ad·∫Ωrencia e conformidade com cada 
um dos quatro n√≠veis do modelo.

üîπ N√≠vel 0 ‚Äì The Swamp of POX
Apenas troca de dados via HTTP, sem usar recursos do protocolo.
Normalmente s√≥ um endpoint, ex: /api.

üîπ N√≠vel 1 ‚Äì Recursos
Identifica√ß√£o de recursos com URLs diferentes.
Ex: /clientes, /clientes/1.

üîπ N√≠vel 2 ‚Äì Verbos HTTP
Uso correto dos m√©todos GET, POST, PUT, DELETE.
Diferencia opera√ß√µes por verbo, n√£o s√≥ pela URL.

üîπ N√≠vel 3 ‚Äì HATEOAS (Hypermedia As The Engine Of Application State)
Respostas trazem links que indicam pr√≥ximas a√ß√µes poss√≠veis.
O cliente descobre dinamicamente como interagir com a API.


                                                        Inje√ß√£o de Depend√™ncia DI - Dependency Injection
√â uma t√©cnica de programa√ß√£o usada para tornar uma classe independente de suas depend√™ncias
--Em vez de uma classe criar diretamente suas depend√™ncias (new), elas s√£o fornecidas de fora (inje√ß√£o)

1.C√≥digo mais flex√≠vel e f√°cil de testar
2.Facilita troca de implementa√ß√µes (ex: reposit√≥rio em mem√≥ria ou banco real)
3.Segue o princ√≠pio da Invers√£o de Controle (IoC)

O Princ√≠pio da Invers√£o de Controle (IoC) - √© um conceito de design de software que busca inverter o fluxo de controle de um programa. 
Em vez de o seu c√≥digo controlar a cria√ß√£o e o ciclo de vida de objetos dos quais ele depende, essa responsabilidade √© transferida 
para um container de IoC ou um framework externo, c√≥digo passa a depender de abstra√ß√µes, e n√£o de implementa√ß√µes concretas

Analogia Ex.
uma analogia do dia a dia de Inje√ß√£o de Depend√™ncia (DI):
üîπ Sem DI (acoplado)
Imagine que voc√™ tem uma cafeteira ‚òï que j√° vem com o p√≥ de caf√© preso dentro dela.
Se quiser trocar o caf√© por outro tipo (ex: descafeinado), n√£o d√°.
Se estragar, voc√™ perde tudo junto.

üîπ Com DI (desacoplado)
Agora, pense em uma cafeteira normal onde voc√™ coloca o p√≥ de caf√© de fora.
A cafeteira n√£o sabe nem se √© caf√© forte, fraco ou ch√°.
Voc√™ pode mudar a marca ou at√© usar ch√°, s√≥ trocando o que injeta.
A cafeteira continua funcionando igual.

A ideia √©: o objeto (cafeteira) n√£o cria sua depend√™ncia (p√≥ de caf√©), ele apenas recebe de fora o que precisa para funcionar.
Isso √© inje√ß√£o de depend√™ncia ‚Üí voc√™ injeta o que o objeto precisa, em vez de ele mesmo criar.